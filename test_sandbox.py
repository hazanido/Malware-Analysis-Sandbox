import os
import pytest
import subprocess
from app import app, UPLOAD_FOLDER, REPORT_FOLDER, execute_suspicious_file

@pytest.fixture
def client():
    app.config['TESTING'] = True
    with app.test_client() as client:
        yield client

def test_home_page(client):
    rv = client.get('/')
    assert rv.status_code == 200
    assert b'Welcome to the Malware Analysis Sandbox!' in rv.data

def test_upload_page(client):
    rv = client.get('/upload')
    assert rv.status_code == 200
    assert b'Upload File' in rv.data

def test_file_upload_and_execution(client):
    test_filename = 'test_file.txt'
    test_filepath = os.path.join(UPLOAD_FOLDER, test_filename)
    with open(test_filepath, 'w') as f:
        f.write('This is a test file for the sandbox.')

    with open(test_filepath, 'rb') as test_file:
        rv = client.post('/upload', data={'file': test_file}, follow_redirects=True)
        assert rv.status_code == 200
        assert b'File uploaded successfully.' in rv.data

    report_filename = f'{test_filename}_report.txt'
    report_filepath = os.path.join(REPORT_FOLDER, report_filename)
    assert os.path.exists(report_filepath)

    with open(report_filepath, 'r') as report_file:
        report_content = report_file.read()
        assert 'System Information' in report_content
        assert 'Command output:' in report_content

    os.remove(test_filepath)
    os.remove(report_filepath)

def test_report_access(client):
    report_filename = 'mock_report.txt'
    report_filepath = os.path.join(REPORT_FOLDER, report_filename)
    with open(report_filepath, 'w') as f:
        f.write('This is a mock report.')

    rv = client.get(f'/report/{report_filename}')
    assert rv.status_code == 200
    assert b'This is a mock report.' in rv.data

    os.remove(report_filepath)

def test_execution_failure_handling():
    non_executable_filename = 'non_executable_file.txt'
    non_executable_filepath = os.path.join(UPLOAD_FOLDER, non_executable_filename)
    with open(non_executable_filepath, 'w') as f:
        f.write('This file is not executable.')

    result = execute_suspicious_file(non_executable_filepath)
    assert 'Failed to execute the file.' in result

    os.remove(non_executable_filepath)

if __name__ == '__main__':
    pytest.main()
